[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

# -----------------------------------------------
# Package infos

[project]
name = "ispec"
description = "Interface Specification"
authors = [
    { name = "ClÃ©ment GUICHARD", email = "clement.guichard0@gmail.com" },
]
readme = "README.rst"
license = {file = "LICENSE"}
requires-python = ">=3.9"
keywords = [
    "python",
    "interface",
    "specification",
]
classifiers = [
    "Development Status :: 7 - Inactive",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "License :: OSI Approved :: MIT License",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dynamic = ["version"]

[project.urls]
"Homepage" = "https://github.com/CGuichard/ispec"
"Source" = "https://github.com/CGuichard/ispec"
"Bug Tracker" = "https://github.com/CGuichard/ispec/issues"

# -----------------------------------------------
# Build & Packaging

[project.optional-dependencies]
dev = [
    "build~=0.10",
    "hatch~=1.6",
    "tox~=4.4",
    "twine~=4.0",
    "wheel~=0.38",
]
test = [
    "pytest-cov~=4.0",
    "pytest-html~=3.2",
    "pytest~=7.2",
]
format = [
    "autoflake~=2.0",
    "black~=23.1",
    "eradicate~=2.2",
    "isort~=5.12",
]
lint = [
    "bandit~=1.7",
    "cohesion",
    "dlint",
    "flake8-2020",
    "flake8-annotations",
    "flake8-annotations-complexity",
    "flake8-annotations-coverage",
    "flake8-async",
    "flake8-blind-except",
    "flake8-bugbear",
    "flake8-builtins",
    "flake8-class-attributes-order",
    "flake8-cognitive-complexity",
    "flake8-comments",
    "flake8-comprehensions",
    "flake8-datetimez",
    "flake8-docstrings",
    "flake8-encodings",
    "flake8-eradicate",
    "flake8-errmsg",
    "flake8-expression-complexity",
    "flake8-fixme",
    "flake8-functions",
    "flake8-functions-names",
    "flake8-implicit-str-concat",
    "flake8-literal",
    "flake8-logging-format",
    "flake8-multiline-containers",
    "flake8-newspaper-style",
    "flake8-noqa",
    "flake8-pep585",
    "flake8-pep604",
    "flake8-pie",
    "flake8-print",
    "flake8-pyproject",
    "flake8-raise",
    "flake8-return",
    "flake8-secure-coding-standard",
    "flake8-self",
    "flake8-simplify",
    "flake8-spellcheck",
    "flake8-tidy-imports",
    "flake8-unused-arguments",
    "flake8-use-pathlib",
    "flake8-variables-names",
    "flake8-warnings",
    "flake8~=5.0",
    "mypy~=1.0",
    "pep8-naming",
    "pylint~=2.16",
    "tryceratops",
    "validate-pyproject[all]~=0.12",
    "vulture~=2.7",
    "xenon~=0.9",
]

[tool.hatch.build]
only-packages = true
skip-excluded-dirs = true

[tool.hatch.build.targets.wheel]
packages = ["src/ispec"]
sources = ["src"]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.version]
source = "vcs"
fallback-version = "0.0.1"

[tool.hatch.version.raw-options]
version_scheme = "python-simplified-semver"
local_scheme = "no-local-version"

# -----------------------------------------------
# Tests

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = [
    "src",
    "tests",
]

addopts = [
    "--show-capture=no",
    "--cov",
    "--cov-config=pyproject.toml",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--doctest-modules",
    "--html=tests-reports/index.html",
    "--self-contained-html",
    "-v",
]

[tool.coverage.run]
branch = true
parallel = true
source = [
    "src",
]
omit = [
    "tests/*",
]

[tool.coverage.paths]
source = [
    "src",
]

[tool.coverage.report]
fail_under = 90
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

[tool.coverage.html]
directory = "tests-reports/coverage"

[tool.coverage.xml]
output = "tests-reports/coverage.xml"

# -----------------------------------------------
# Formatters

[tool.black]
line-length = 88

[tool.isort]
profile = "black"

[tool.autoflake]
check = false
in-place = true
remove-all-unused-imports = true
ignore-init-module-imports = true
remove-duplicate-keys = true
remove-unused-variables = true

# -----------------------------------------------
# Linters

[tool.flake8]
count = false
max-line-length = 88
max-doc-length = 100
extend-ignore = [
    "ANN101",
    "ANN102",
    "D107",
    "D203",
    "D213",
    "R504",
    "W503",
]
per-file-ignores = [
    "__init__.py:F401",
]
# flake8-annotations-complexity
max-annotations-complexity = 4
# flake8-cognitive-complexity
max-cognitive-complexity = 10
# flake8-docstrings
docstring-convention = "all"
# flake8-eradicate
eradicate-aggressive = true
# flake8-expression-complexity
max-expression-complexity = 7
# flake8-functions
max-function-length = 20
max-parameters-amount = 6
max-returns-amount = 4
# flake8-literal
literal-inline-quotes = "double"
literal-multiline-quotes = "double"
literal-docstring-quotes = "double"
# flake8-spellcheck
spellcheck-targets = "comments"
# flake8-variables-names
use-varnames-strict-mode = true
# mccabe
max-complexity = 10

[tool.pylint.main]
fail-under = 10
jobs = 0

[tool.pylint.basic]
module-naming-style = "snake_case"
attr-naming-style = "snake_case"
const-naming-style = "UPPER_CASE"
function-naming-style = "snake_case"
argument-naming-style = "snake_case"
class-naming-style = "PascalCase"
class-const-naming-style = "UPPER_CASE"
class-attribute-naming-style = "snake_case"
method-naming-style = "snake_case"
good-names = ["e", "i", "j", "k", "x", "y", "z", "_"]

[tool.pylint.design]
max-args = 5
max-attributes = 7
max-bool-expr = 5
max-branches = 12
max-locals = 15
max-parents = 7
max-public-methods = 20
max-returns = 4
max-statements = 50
min-public-methods = 2

[tool.pylint.format]
max-line-length = 88
max-module-lines = 1000

[tool.pylint.logging]
logging-format-style = "new"

[tool.pylint.reports]
score = false

[tool.mypy]
strict = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true

[tool.bandit]
skips = ["B101"]

[tool.vulture]
min_confidence = 90
sort_by_size = true
